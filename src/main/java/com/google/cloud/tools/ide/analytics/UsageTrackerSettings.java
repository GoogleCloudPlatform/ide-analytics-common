/*
 * Copyright 2018 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.tools.ide.analytics;

import com.google.common.base.Preconditions;

/**
 * Contains the client-specific analytics settings that users of this library configure. This
 * settings should only need to be configured once and used across all analytics pings.
 */
public class UsageTrackerSettings {

  private final UsageTrackerManager manager;
  private final String analyticsId;
  private final String pageHost;
  private final String platformName;
  private final String platformVersion;
  private final String pluginName;
  private final String pluginVersion;
  private final String clientId;
  private final String userAgent;

  private UsageTrackerSettings(
      UsageTrackerManager manager,
      String analyticsId,
      String pageHost,
      String platformName,
      String platformVersion,
      String pluginName,
      String pluginVersion,
      String clientId,
      String userAgent) {
    this.manager = manager;
    this.analyticsId = analyticsId;
    this.pageHost = pageHost;
    this.platformName = platformName;
    this.platformVersion = platformVersion;
    this.pluginName = pluginName;
    this.pluginVersion = pluginVersion;
    this.clientId = clientId;
    this.userAgent = userAgent;
  }

  public UsageTrackerManager manager() {
    return manager;
  }

  public String getAnalyticsId() {
    return analyticsId;
  }

  public String getPageHost() {
    return pageHost;
  }

  public String getPlatformName() {
    return platformName;
  }

  public String getPlatformVersion() {
    return platformVersion;
  }

  public String getPluginName() {
    return pluginName;
  }

  public String getPluginVersion() {
    return pluginVersion;
  }

  public String getClientId() {
    return clientId;
  }

  public String getUserAgent() {
    return userAgent;
  }

  public static class Builder {

    private UsageTrackerManager manager;
    private String analyticsId;
    private String pageHost;
    private String platformName;
    private String platformVersion;
    private String pluginName;
    private String pluginVersion;
    private String clientId;
    private String userAgent;

    /**
     * A callback that indicates if usage tracking should be enabled. For example, it could be based
     * on an opt-in setting that users toggle in an IDE UI.
     */
    public Builder manager(UsageTrackerManager manager) {
      this.manager = manager;
      return this;
    }

    /** The Google Analytics ID with which to send the analytics pings. */
    public Builder analyticsId(String analyticsId) {
      this.analyticsId = analyticsId;
      return this;
    }

    /** The page host (hostname) / 'dh' property of the Google Analytics API */
    public Builder pageHost(String pageHost) {
      this.pageHost = pageHost;
      return this;
    }

    /** The IDE platform name. E.g. 'idea' for IntelliJ Ultimate. */
    public Builder platformName(String platformName) {
      this.platformName = platformName;
      return this;
    }

    /** The IDE platform version. */
    public Builder platformVersion(String platformVersion) {
      this.platformVersion = platformVersion;
      return this;
    }

    /** The name of the IDE plugin using this library. */
    public Builder pluginName(String pluginName) {
      this.pluginName = pluginName;
      return this;
    }

    /** The version of the IDE plugin using this library. */
    public Builder pluginVersion(String pluginVersion) {
      this.pluginVersion = pluginVersion;
      return this;
    }

    /** A unique ID generated by the client of this library. */
    public Builder clientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    /** The user agent with which to send the Google Analytics pings. */
    public Builder userAgent(String userAgent) {
      this.userAgent = userAgent;
      return this;
    }

    /** Returns a configured {@link UsageTrackerSettings} object. */
    public UsageTrackerSettings build() {
      Preconditions.checkNotNull(manager);

      return new UsageTrackerSettings(
          manager,
          analyticsId,
          pageHost,
          platformName,
          platformVersion,
          pluginName,
          pluginVersion,
          clientId,
          userAgent);
    }
  }
}
